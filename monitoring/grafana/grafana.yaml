---
# Source: grafana/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    helm.sh/chart: grafana-6.57.3
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: homelab
    app.kubernetes.io/version: "9.5.3"
    app.kubernetes.io/managed-by: Helm
  name: homelab-grafana
  namespace: monitoring
---
# Source: grafana/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: homelab-grafana
  namespace: monitoring
  labels:
    helm.sh/chart: grafana-6.57.3
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: homelab
    app.kubernetes.io/version: "9.5.3"
    app.kubernetes.io/managed-by: Helm
data:
  grafana.ini: |
    [analytics]
    check_for_updates = true
    [grafana_net]
    url = https://grafana.net
    [log]
    mode = console
    [paths]
    data = /var/lib/grafana/
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning
    [server]
    domain = grafana.int.kyledev.co
  datasources.yaml: |
    apiVersion: 1
    datasources:
    - access: proxy
      isDefault: true
      name: Prometheus
      type: prometheus
      url: http://homelab-prometheus-server.prometheus.svc.cluster.local
---
# Source: grafana/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: homelab-grafana
  namespace: monitoring
  labels:
    helm.sh/chart: grafana-6.57.3
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: homelab
    app.kubernetes.io/version: "9.5.3"
    app.kubernetes.io/managed-by: Helm
  finalizers:
    - kubernetes.io/pvc-protection
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "10Gi"
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: homelab-grafana
spec:
  accessModes:
    - ReadWriteOnce
  capacity:
    storage: 10Gi
  persistentVolumeReclaimPolicy: Retain
---
# Source: grafana/templates/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    helm.sh/chart: grafana-6.57.3
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: homelab
    app.kubernetes.io/version: "9.5.3"
    app.kubernetes.io/managed-by: Helm
  name: homelab-grafana-clusterrole
rules: []
---
# Source: grafana/templates/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: homelab-grafana-clusterrolebinding
  labels:
    helm.sh/chart: grafana-6.57.3
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: homelab
    app.kubernetes.io/version: "9.5.3"
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: homelab-grafana
    namespace: monitoring
roleRef:
  kind: ClusterRole
  name: homelab-grafana-clusterrole
  apiGroup: rbac.authorization.k8s.io
---
# Source: grafana/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: homelab-grafana
  namespace: monitoring
  labels:
    helm.sh/chart: grafana-6.57.3
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: homelab
    app.kubernetes.io/version: "9.5.3"
    app.kubernetes.io/managed-by: Helm
rules: []
---
# Source: grafana/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: homelab-grafana
  namespace: monitoring
  labels:
    helm.sh/chart: grafana-6.57.3
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: homelab
    app.kubernetes.io/version: "9.5.3"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: homelab-grafana
subjects:
  - kind: ServiceAccount
    name: homelab-grafana
    namespace: monitoring
---
# Source: grafana/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: homelab-grafana
  namespace: monitoring
  labels:
    helm.sh/chart: grafana-6.57.3
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: homelab
    app.kubernetes.io/version: "9.5.3"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: service
      port: 80
      protocol: TCP
      targetPort: 3000
  selector:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: homelab
---
# Source: grafana/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: homelab-grafana
  namespace: monitoring
  labels:
    helm.sh/chart: grafana-6.57.3
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: homelab
    app.kubernetes.io/version: "9.5.3"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
      app.kubernetes.io/instance: homelab
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
        app.kubernetes.io/instance: homelab
      annotations:
        checksum/config: 70c6087838921697c3f5bb8a5c2dae5c39caf9c94dcb4a17f0c97ca888a654be
        checksum/dashboards-json-config: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/sc-dashboard-provider-config: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        kubectl.kubernetes.io/default-container: grafana
    spec:
      serviceAccountName: homelab-grafana
      automountServiceAccountToken: true
      securityContext:
        fsGroup: 472
        runAsGroup: 472
        runAsNonRoot: true
        runAsUser: 472
      initContainers:
        - name: init-chown-data
          image: "docker.io/library/busybox:1.31.1"
          imagePullPolicy: IfNotPresent
          securityContext:
            capabilities:
              add:
                - CHOWN
            runAsNonRoot: false
            runAsUser: 0
            seccompProfile:
              type: RuntimeDefault
          command:
            - chown
            - -R
            - 472:472
            - /var/lib/grafana
          volumeMounts:
            - name: storage
              mountPath: "/var/lib/grafana"
      enableServiceLinks: true
      containers:
        - name: grafana
          image: "docker.io/grafana/grafana:9.5.3"
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: config
              mountPath: "/etc/grafana/grafana.ini"
              subPath: grafana.ini
            - name: storage
              mountPath: "/var/lib/grafana"
            - name: config
              mountPath: "/etc/grafana/provisioning/datasources/datasources.yaml"
              subPath: "datasources.yaml"
          ports:
            - name: grafana
              containerPort: 3000
              protocol: TCP
            - name: gossip-tcp
              containerPort: 9094
              protocol: TCP
            - name: gossip-udp
              containerPort: 9094
              protocol: UDP
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: grafana-admin-credentials
                  key: username
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana-admin-credentials
                  key: password
            - name: GF_PATHS_DATA
              value: /var/lib/grafana/
            - name: GF_PATHS_LOGS
              value: /var/log/grafana
            - name: GF_PATHS_PLUGINS
              value: /var/lib/grafana/plugins
            - name: GF_PATHS_PROVISIONING
              value: /etc/grafana/provisioning
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 60
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
      volumes:
        - name: config
          configMap:
            name: homelab-grafana
        - name: storage
          persistentVolumeClaim:
            claimName: homelab-grafana
---
# Source: grafana/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: homelab-grafana
  namespace: monitoring
  labels:
    helm.sh/chart: grafana-6.57.3
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: homelab
    app.kubernetes.io/version: "9.5.3"
    app.kubernetes.io/managed-by: Helm
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    kubernetes.io/ingress.class: "nginx"
spec:
  tls:
    - hosts:
        - grafana.int.kyledev.co
      secretName: grafana-kyledev-tls-prod
  rules:
    - host: grafana.int.kyledev.co
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: homelab-grafana
                port:
                  number: 80
---
# Source: grafana/templates/tests/test-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    helm.sh/chart: grafana-6.57.3
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: homelab
    app.kubernetes.io/version: "9.5.3"
    app.kubernetes.io/managed-by: Helm
  name: homelab-grafana-test
  namespace: monitoring
  annotations:
    "helm.sh/hook": test-success
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
---
# Source: grafana/templates/tests/test-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: homelab-grafana-test
  namespace: monitoring
  annotations:
    "helm.sh/hook": test-success
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
  labels:
    helm.sh/chart: grafana-6.57.3
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: homelab
    app.kubernetes.io/version: "9.5.3"
    app.kubernetes.io/managed-by: Helm
data:
  run.sh: |-
    @test "Test Health" {
      url="http://homelab-grafana/api/health"

      code=$(wget --server-response --spider --timeout 90 --tries 10 ${url} 2>&1 | awk '/^  HTTP/{print $2}')
      [ "$code" == "200" ]
    }
---
# Source: grafana/templates/tests/test.yaml
apiVersion: v1
kind: Pod
metadata:
  name: homelab-grafana-test
  labels:
    helm.sh/chart: grafana-6.57.3
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: homelab
    app.kubernetes.io/version: "9.5.3"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
  namespace: monitoring
spec:
  serviceAccountName: homelab-grafana-test
  containers:
    - name: homelab-test
      image: "docker.io/bats/bats:v1.4.1"
      imagePullPolicy: "IfNotPresent"
      command: ["/opt/bats/bin/bats", "-t", "/tests/run.sh"]
      volumeMounts:
        - mountPath: /tests
          name: tests
          readOnly: true
  volumes:
    - name: tests
      configMap:
        name: homelab-grafana-test
  restartPolicy: Never

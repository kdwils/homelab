apiVersion: v1
kind: ConfigMap
metadata:
  name: acquis-configmap
data:
  acquis.yaml: |-
    filenames:
      - /var/log/secure
    labels:
      type: syslog
    ---
    filenames:
      - /var/log/messages
    labels:
      type: syslog
---
apiVersion: v1
kind: Service
metadata:
  name: crowdsec-agent-service
  labels:
    app: crowdsec-agent-service
spec:
  type: ClusterIP
  ports:
    - port: 6060
      targetPort: 6060
      protocol: TCP
      name: metrics
  selector:
    k8s-app: crowdsec
    type: agent
    version: v1
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: crowdsec-agent
  labels:
    k8s-app: crowdsec
    type: agent
    version: v1
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      k8s-app: crowdsec
      type: agent
  template:
    metadata:
      annotations:
        checksum/agent-configmap: 524e841fd2661b639b1cc3aee213e22b04572ed44b8d8c81289d7e16b76bab8c
        checksum/acquis-configmap: 680145cad122e58eaad5d9aa96581ffc35a6d7d83f55a62b9286f054d16754fa
      labels:
        k8s-app: crowdsec
        type: agent
        version: v1
    spec:
      initContainers:
        - name: wait-for-lapi-and-register
          image: "crowdsecurity/crowdsec:v1.7.3"
          imagePullPolicy: IfNotPresent
          command:
            [
              "sh",
              "-c",
              'until nc "$LAPI_HOST" "$LAPI_PORT" -z; do echo waiting for lapi to start; sleep 5; done; ln -s /staging/etc/crowdsec /etc/crowdsec && cscli lapi register --machine "$USERNAME" -u "$LAPI_URL" --token "$REGISTRATION_TOKEN" && cp /etc/crowdsec/local_api_credentials.yaml /tmp_config/local_api_credentials.yaml',
            ]
          resources:
            limits:
              memory: 50Mi
            requests:
              cpu: 1m
              memory: 10Mi
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
          volumeMounts:
            - name: crowdsec-config
              mountPath: /tmp_config
          env:
            - name: REGISTRATION_TOKEN
              valueFrom:
                secretKeyRef:
                  name: crowdsec-lapi-secrets
                  key: registrationToken
            - name: USERNAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: LAPI_URL
              value: "http://crowdsec-service:8080"
            - name: LAPI_HOST
              value: "crowdsec-service"
            - name: LAPI_PORT
              value: "8080"
            - name: "CROWDSEC_BYPASS_DB_VOLUME_CHECK"
              value: "true"
      containers:
        - name: crowdsec-agent
          image: "crowdsecurity/crowdsec:v1.7.3"
          imagePullPolicy: IfNotPresent
          command:
            [
              "sh",
              "-c",
              "cp /tmp_config/local_api_credentials.yaml /staging/etc/crowdsec/local_api_credentials.yaml && mv -n /staging/etc/crowdsec/* /etc/crowdsec_data/ && rm -rf /staging/etc/crowdsec && ln -s /etc/crowdsec_data /etc/crowdsec && ./docker_start.sh",
            ]
          env:
            - name: DISABLE_LOCAL_API
              value: "true"
            - name: DISABLE_ONLINE_API
              value: "false"
            - name: LOCAL_API_URL
              value: "http://crowdsec-service:8080"
            - name: PARSERS
              value: "crowdsecurity/cri-logs crowdsecurity/k8s-audit"
            - name: COLLECTIONS
              value: "crowdsecurity/base-http-scenarios crowdsecurity/k8s-audit"
            - name: "CROWDSEC_BYPASS_DB_VOLUME_CHECK"
              value: "true"
          resources:
            limits:
              cpu: 500m
              memory: 250Mi
            requests:
              cpu: 500m
              memory: 250Mi
          ports:
            - name: metrics
              containerPort: 6060
              protocol: TCP
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /metrics
              port: metrics
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /metrics
              port: metrics
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5

          startupProbe:
            failureThreshold: 30
            httpGet:
              path: /metrics
              port: metrics
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5

          securityContext:
            allowPrivilegeEscalation: false
            privileged: false

          volumeMounts:
            - name: crowdsec-config
              mountPath: /tmp_config
            - name: crowdsec-agent-config
              mountPath: /etc/crowdsec_data
            - name: acquis-config-volume
              mountPath: /etc/crowdsec_data/acquis.yaml
              subPath: acquis.yaml
            - name: varlog
              mountPath: /var/log
              readOnly: true
      terminationGracePeriodSeconds: 30
      volumes:
        - name: crowdsec-config
          emptyDir: {}
        - name: acquis-config-volume
          configMap:
            name: acquis-configmap
        - name: varlog
          hostPath:
            path: /var/log
        - name: crowdsec-agent-config
          persistentVolumeClaim:
            claimName: crowdsec-agent-config-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: crowdsec-agent-config-pvc
  labels:
    k8s-app: crowdsec
    type: agent
    version: v1
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: "100Mi"
---
apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: crowdsec-agent
  namespace: crowdsec
  labels:
    release: prometheus
spec:
  selector:
    matchLabels:
      k8s-app: crowdsec
      type: agent
  namespaceSelector:
    matchNames: [crowdsec]
  attachMetadata:
    node: true
  podMetricsEndpoints:
    - port: metrics
      relabelings:
        - action: replace
          sourceLabels:
            - __meta_kubernetes_pod_node_name
          targetLabel: machine
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: crowdsec-agent-service
  namespace: crowdsec
  labels:
    release: prometheus
spec:
  selector:
    matchLabels:
      app: crowdsec-agent-service
  namespaceSelector:
    matchNames: [crowdsec]
  attachMetadata:
    node: true
  endpoints:
    - port: metrics
      relabelings:
        - action: replace
          sourceLabels:
            - __meta_kubernetes_pod_node_name
          targetLabel: machine
---
apiVersion: v1
kind: Pod
metadata:
  name: "crowdsec-test-agent"
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  containers:
    - name: "crowdsec-test-agent"
      image: curlimages/curl
      command:
        - /bin/sh
        - -ec
        - |
          curl -XGET http://crowdsec-agent-service:6060/metrics
  restartPolicy: Never

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: crowdsec-appsec-config-pvc
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: "100Mi"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: crowdsec-data
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: "100Mi"
---
# Source: crowdsec/templates/appsec-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: appsec-acquis-config
data:
  acquis.yaml: |-
    ---
    appsec_config: crowdsecurity/appsec-default
    labels:
      type: appsec
    listen_addr: 0.0.0.0:7422
    path: /
    source: appsec
---
# Source: crowdsec/templates/appsec-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "crowdsec-appsec-configs"
data:
  appsec-config.yaml: |
    name: crowdsecurity/appsec-default
    default_remediation: ban
    inband_rules:
    - crowdsecurity/base-config
    - crowdsecurity/vpatch-*
    - crowdsecurity/generic-*
    - crowdsecurity/crs
---
# Source: crowdsec/templates/appsec-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: crowdsec-appsec-service
  labels:
    app: crowdsec-appsec-service
  annotations:
    tailscale.com/expose: "true"
    tailscale.com/hostname: "appsec"
spec:
  type: LoadBalancer
  loadBalancerClass: tailscale
  ports:
    - port: 6060
      targetPort: 6060
      protocol: TCP
      name: metrics
    - port: 7422
      targetPort: 7422
      protocol: TCP
      name: appsec
    - port: 443
      targetPort: 7422
      protocol: TCP
      name: appsec-https
    - port: 80
      targetPort: 7422
      protocol: TCP
      name: appsec-http
  selector:
    k8s-app: crowdsec
    type: appsec
    version: v1
---
# Source: crowdsec/templates/appsec-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: crowdsec-appsec
  labels:
    k8s-app: crowdsec
    type: appsec
    version: v1
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      k8s-app: crowdsec
      type: appsec
  template:
    metadata:
      annotations:
        checksum/appsec-acquis-configmap: 13a9b7976f1372e0dfd6142dc6cced08d43b5bc6fcfdec305f761ea3df7b3e6f
      labels:
        k8s-app: crowdsec
        type: appsec
        version: v1
    spec:
      initContainers:
        - name: wait-for-lapi-and-register
          image: "crowdsecurity/crowdsec:v1.6.11"
          imagePullPolicy: IfNotPresent
          command:
            [
              "sh",
              "-c",
              'until nc "$LAPI_HOST" "$LAPI_PORT" -z; do echo waiting for lapi to start; sleep 5; done; ln -s /staging/etc/crowdsec /etc/crowdsec && cscli lapi register --machine "$USERNAME" -u "$LAPI_URL" --token "$REGISTRATION_TOKEN" && cp /etc/crowdsec/local_api_credentials.yaml /tmp_config/local_api_credentials.yaml',
            ]
          resources:
            limits:
              memory: 50Mi
            requests:
              cpu: 1m
              memory: 10Mi
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
          volumeMounts:
            - name: crowdsec-creds
              mountPath: /tmp_config
          env:
            - name: REGISTRATION_TOKEN
              valueFrom:
                secretKeyRef:
                  name: crowdsec-lapi-secrets
                  key: registrationToken
            - name: USERNAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: LAPI_URL
              value: "http://crowdsec-service:8080"
            - name: LAPI_HOST
              value: "crowdsec-service"
            - name: LAPI_PORT
              value: "8080"
      containers:
        - name: crowdsec-appsec
          image: "crowdsecurity/crowdsec:v1.6.11"
          imagePullPolicy: IfNotPresent
          command:
            [
              "sh",
              "-c",
              "cp /tmp_config/local_api_credentials.yaml /staging/etc/crowdsec/local_api_credentials.yaml && ./docker_start.sh",
            ]
          env:
            - name: REGISTRATION_TOKEN
              valueFrom:
                secretKeyRef:
                  name: crowdsec-lapi-secrets
                  key: registrationToken
            - name: USERNAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: LAPI_URL
              value: "http://crowdsec-service:8080"
            - name: LAPI_HOST
              value: "crowdsec-service"
            - name: LAPI_PORT
              value: "8080"
            - name: DISABLE_LOCAL_API
              value: "true"
          resources:
            limits:
              cpu: 500m
              memory: 250Mi
            requests:
              cpu: 500m
              memory: 250Mi
          ports:
            - name: appsec
              containerPort: 7422
              protocol: TCP
            - name: metrics
              containerPort: 6060
              protocol: TCP
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /metrics
              port: metrics
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /metrics
              port: metrics
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          startupProbe:
            failureThreshold: 30
            httpGet:
              path: /metrics
              port: metrics
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
          volumeMounts:
            - name: crowdsec-creds
              mountPath: /tmp_config
            - name: appsec-acquis-config-volume
              mountPath: /etc/crowdsec/acquis.yaml
              subPath: acquis.yaml
            - name: crowdsec-appsec-configs-appsec-config
              mountPath: /etc/crowdsec/appsec-configs/appsec-config.yaml
              subPath: appsec-config.yaml
            - name: crowdsec-config
              mountPath: /etc/crowdsec_data
            - name: crowdsec-data
              mountPath: /etc/crowdsec
            - name: crowdsec-data
              mountPath: /var/lib/crowdsec
              subPath: collections
      terminationGracePeriodSeconds: 30
      volumes:
        - name: appsec-acquis-config-volume
          configMap:
            name: appsec-acquis-config
        - name: crowdsec-creds
          emptyDir: {}
        - name: crowdsec-appsec-configs-appsec-config
          configMap:
            name: "crowdsec-appsec-configs"
            items:
              - key: appsec-config.yaml
                path: appsec-config.yaml
        - name: crowdsec-config
          persistentVolumeClaim:
            claimName: crowdsec-appsec-config-pvc
        - name: crowdsec-data
          persistentVolumeClaim:
            claimName: crowdsec-data
      priorityClassName:
---
# Source: crowdsec/templates/tests/test_appsec_up.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "crowdsec-test-appsec-up"
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  containers:
    - name: crowdsec-test-appsec-up
      image: curlimages/curl
      command:
        - /bin/sh
        - -ec
        - |
          curl -XGET http://crowdsec-appsec-service:7422/
          curl -XGET http://crowdsec-appsec-service:6060/metrics
  restartPolicy: Never
